@using System.Web.Mvc.Html
@using AutoMapper.Internal
@using ClientDependency.Core.Mvc
@using HRI.Controllers
@using HRI.Models
@using HRI.ViewModels
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();

    var registerModel = new RegisterFormViewModel();
    registerModel.Zipcode = TempData["ZipCode"].ToNullSafeString() ?? string.Empty;
    registerModel.PlanId = TempData["PlanId"].ToNullSafeString() ?? string.Empty;

    var isNewUser = !string.IsNullOrEmpty(registerModel.PlanId);
    var formClass = isNewUser || !ViewData.ModelState.IsValid ? string.Empty : "display: none;";
    var selectTypeClass = isNewUser || !ViewData.ModelState.IsValid ? "hri-hide" : string.Empty;

}

<script>
    var monthtext = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];
    var memberCheckError = false;

    function createDOBdropdown() {
        var setMonth, setDay, setYear;
        var startDOB = $('#dateOfBirth').val();

        if (startDOB.indexOf('1/1/0001') != 0) {
            var startDate = new Date(startDOB);
            setMonth = startDate.getMonth() + 1;
            setDay = startDate.getDate();
            setYear = startDate.getFullYear();
        }

        document.write('<select id="dobMonth" style="width: 80px"><option value="">Month</option>')
        for (var i = 1; i <= 12; i++) {
            var sel = i == setMonth ? ' selected="selected"' : '';
            document.write('<option value="' + i + '"' + sel + '>' + monthtext[i-1] + '</option>');
        }
        document.write('</select> <select id="dobDay" style="width: 80px"><option value="">Day</option>');
        for (var i = 1; i <= 31; i++) {
            var sel = i == setDay ? ' selected="selected"' : '';
            document.write('<option value="' + i + '"' + sel + '>' + i + '</option>');
        }
        document.write('</select> <select id="dobYear" style="width: 100px"><option value="">Year</option>');
        for (var i = new Date().getFullYear() ; i >= 1900; i--) {
            var sel = i == setYear ? ' selected="selected"' : '';
            document.write('<option value="' + i + '"' + sel + '>' + i + '</option>');
        }
        document.write('</select>');

        $('#dobMonth, #dobDay, #dobYear').change(function () {
            var month = $('#dobMonth').val();
            var day = $('#dobDay').val();
            var year = $('#dobYear').val();
            var dob = month + '/' + day + '/' + year;
            $('#dateOfBirth').val(dob);
            @if (!isNewUser)
            {
                @:validateMemberId();
            }
        });
    }

    function validateMemberId() {
        if ($('#memberId').val().length != 9)
            return;

        $.ajax({
            url: "/umbraco/Surface/RegisterSurface/ValidateMemberId",
            data: {
                'registerModel.MemberId': $('#memberId').val(),
                'registerModel.DateOfBirth': $('#dateOfBirth').val()
            },
            success: function(data) {
                if (data == 'true') {
                    $('#memberIdCheck').text('');
                    $('input, select').not('button').removeAttr('disabled');
                    memberCheckError = false;
                } else {
                    $('#memberIdCheck').text(JSON.parse(data));
                    $('input').not('#memberId, input[type="radio"]').attr('disabled', 'disabled');
                    memberCheckError = true;
                }
                $('#memberId').next('span.field-validation-error').text('');
            },
            error: function() {
                $('#memberIdCheck').text("Error checking member ID / Date of birth.");
                $('#memberId').next('span.field-validation-error').text('');
                $('input').not('#memberId, input[type="radio"]').attr('disabled', 'disabled');
                memberCheckError = true;
            },
            dataType: 'html'
        });
    }
</script>

@Html.Raw(Html.RenderJsHere())

@using (Html.BeginUmbracoForm<RegisterSurfaceController>("HandleRegisterMember"))
{
    <fieldset>
    @Html.ValidationSummary("registerModel", true)

    <div class="row-fluid already-member">
        <div class="span3 offset9">
            Already registered? <a href="/for-members/login">Log in</a>
        </div>
    </div>
        <div class="row-fluid block select-type group @selectTypeClass">
            <div class="span5 desc"><h3>Select the option that best describes you.</h3></div>
            <div class="span5 selection">
                <label>
                    <input type="radio" name="user_type" id="user_type" value="register"> <span>I'm enrolled in a Health Republic Insurance plan.</span>
                    <span class="desc">This means you enrolled via NY State of Health, or: Via a paper application sent by mail or fax, or: You've recently received a bill from HRI via email or mail.</span>
                </label>

                <label>
                    <input type="radio" name="user_type" id="user_type" value="shop"> <span>I'd like to shop for a health insurance plan.</span>
                    <span class="desc">Please <a href="/shop-for-plans/compare-plans/">shop for plans here</a>. If you need help or have questions, please call 888.990.5702 M-F, 8:30p, - 5pm.</span>
                </label>

                <label class="last">
                    <input type="radio" name="user_type" id="user_type" value="provider"> <span>I'm a broker or healthcare provider.</span>
                    <span class="desc">Brokers, please visit our <a href="/for-brokers/index/">broker page</a> for more info. Healcare providers, please visit our <a href="/for-providers/index/">provider page</a></span>
                </label>
            </div>
        </div>
    <div id="register-form" style="@formClass">
        <div class="row-fluid block group">
            <div class="span5 desc info">
				<h3>@Umbraco.Field("InformationHeader")</h3>
                @Umbraco.Field("InformationContent")
            </div>

            <div class="span7 @(isNewUser ? "hide" : string.Empty)">
                @Html.Label("Member ID")
                @Html.TextBoxFor(m => registerModel.MemberId, new { @id = "memberId", maxlength = 9, @class = "short" })
                @Html.ValidationMessageFor(m => registerModel.MemberId)
                <div class="field-validation-error"><div id="memberIdCheck"></div></div>
            </div>
            @if (isNewUser)
            {
                <div class="span3 name">
                    @Html.Label("First Name")
                    @Html.TextBoxFor(m => registerModel.FirstName)
                    @Html.ValidationMessageFor(m => registerModel.FirstName)
                </div>
                <div class="span3 name">
                    @Html.Label("Last Name")
                    @Html.TextBoxFor(m => registerModel.LastName)
                    @Html.ValidationMessageFor(m => registerModel.LastName)
                </div>
            }
        </div>

        <div class="row-fluid @(isNewUser ? "hide" : string.Empty)">
            <div class="span7 offset5">
                @Html.Label("DOB")
                @Html.HiddenFor(m => registerModel.DateOfBirth, new { @id = "dateOfBirth", value = registerModel.DateOfBirth })
                <script>
                    createDOBdropdown();
                </script>
            </div>
        </div>
        @if (!isNewUser)
        {
            <div class="row-fluid">
                <div class="span3 offset5 name">
                    @Html.Label("First Name")
                    @Html.TextBoxFor(m => registerModel.FirstName)
                    @Html.ValidationMessageFor(m => registerModel.FirstName)
                </div>
                <div class="span3 name">
                    @Html.Label("Last Name")
                    @Html.TextBoxFor(m => registerModel.LastName)
                    @Html.ValidationMessageFor(m => registerModel.LastName)
                </div>
            </div>
        }
        <div class="row-fluid">
            <div class="span7 offset5">
                @Html.Label("Email")
                @Html.TextBoxFor(m => registerModel.Email)
                @Html.ValidationMessageFor(m => registerModel.Email)
            </div>
        </div>
        <div class="row-fluid">
            <div class="span7 offset5">
                @Html.Label("Confirm Email")
                @Html.TextBoxFor(m => registerModel.ConfirmEmail, new { @class = "nopaste" })
                @Html.ValidationMessageFor(m => registerModel.ConfirmEmail)
            </div>
        </div>
        @if (isNewUser)
        {
            <div class="row-fluid">
                <div class="span7 offset5">
                    @Html.Label("Zip Code")
                    @Html.TextBoxFor(m => registerModel.Zipcode, new {@id = "zipCode", maxlength = 5, data_inputmask = "'mask': '99999'"})
                    @Html.ValidationMessageFor(m => registerModel.Zipcode)
                    <div id="zipCodeCheck"></div>
                </div>
            </div>
        }
        <div class="row-fluid block">
            <div class="span5 desc">				
				<h3>@Umbraco.Field("UsernameHeader")</h3>
                @Umbraco.Field("UsernameContent")
			</div>
            <div class="span7">
                @Html.Label("Username")
                @Html.TextBoxFor(m => registerModel.Username, new { @id = "username" })
                @Html.ValidationMessageFor(m => registerModel.Username)
                <div id="userNameCheck"></div>
            </div>
        </div>

        <div class="row-fluid block">
            <div class="span5 desc">                
                <h3>@Umbraco.Field("PasswordHeader")</h3>
                <div class="password-help">@Umbraco.Field("PasswordContent")</div>
            </div>
            <div class="span7">
                @Html.LabelFor(m => registerModel.Password)
                @Html.PasswordFor(m => registerModel.Password)
                <span id="password-valid" class="valid hri-hide"></span>
                @Html.ValidationMessageFor(m => registerModel.Password)

                @Html.LabelFor(m => registerModel.ConfirmPassword)
                @Html.PasswordFor(m => registerModel.ConfirmPassword)
                @Html.ValidationMessageFor(m => registerModel.ConfirmPassword)
            </div>
        </div>
        <div class="row-fluid block">
        @if (isNewUser)
        {
            <div class="span5 desc">				
                <h3>@Umbraco.Field("OptionalHeader")</h3>
                @Umbraco.Field("OptionalContent")
            </div>
            <div class="span7">
                @Html.Label("Phone Number")
                @Html.TextBoxFor(
                    m => registerModel.Phone,
                    new {data_inputmask = string.Format("'mask': '{0}'", RegisterFormViewModel.PhoneInputMask)})
                @Html.ValidationMessageFor(m => registerModel.Phone)
                <div id="phoneNumberCheck"></div>
            </div>
        }
        </div>
        <div class="row-fuild">
            <div class="span2 offset5"><button class="btn cta cta-centered disable-after-click" id="submit-form" disabled="disabled">Submit</button></div>
            <div class="span4 submit-idle-helper"><span>Please Wait a Moment while we process your Registration</span></div>
        </div>
        @Html.HiddenFor(m => registerModel.PlanId, new { value = registerModel.PlanId })
    </div>
</fieldset>
}

<script>
    // Check valid zipCode
    @{if (isNewUser)
    {
        <text>
        $('#zipCode').blur(function() {
            $.ajax({
                url: '/Umbraco/Surface/ComparePlansSurface/ValidateZipCode',
                data: { ZipCode: $('#zipCode').val() },
                success: function(data) {
                    if (data == 'true')
                        $('#zipCodeCheck').html('');
                    else
                        $('#zipCodeCheck').html('<span class="error">Invalid Zip Code</span>');
                },
                error: function() {
                    $('#zipCodeCheck').html('<span class="error">There was an error validating the Zip Code</span>');
                },
                dataType: 'html'
            });
        });
        </text>
    }
    else
    {
        <text>
    $('#memberId').blur(validateMemberId);

    $('#zipCode').blur(function() {
        // length is always 5 from input mask, so check if there are any _
            if ($(this).val().length == 5 && $(this).val().indexOf('_') < 0) {
                $('#zipCodeCheck').html('');
            } else {
                $('#zipCodeCheck').html('<span class="error">Invalid Zip Code</span>');
            }
        });

    </text>
    }}

    $('#registerModel_Phone').blur(function() {
        // If the phone number is not blank and less than 10 digits
        if ($(this).val().indexOf('_') > -1) {
            $('#phoneNumberCheck').html('<span class="error">Invalid Phone Number</span>');
        } else {
            $('#phoneNumberCheck').html('');
        }
    });

    // Check user uniqueness
    $("#username").keyup(function() {
        if ($('#username').valid()) {
            $.ajax({
                url: "/umbraco/api/HriApi/IsUserNameAvailable",
                data: { username: $('#username').val() },
                success: function (data) {
                    var message = data == 'true' ? "<span class='success'>Username is available</span>"
                                                 : "<span class='error'>Username not available</span>";
                    $('#userNameCheck').html(message);
                },
                error: function () { $('#userNameCheck').html("<span class='error'>Username not available</span>"); },
                dataType: 'html'
            });
        }
    });

    $(document).ready(function () {
        $("#registerModel_Ssn").inputmask();
        $("#zipCode").inputmask();
        $("#registerModel_Phone").inputmask();

        // Prevent paste in confirm email text box
        $('.nopaste').bind('paste', function (e) {
            e.preventDefault();
        });

        var validator = $('form').first().validate();
        @if (string.IsNullOrEmpty(registerModel.PlanId))
        {
            <text>
            $('#memberId').rules('add', {
                required: true,
                messages: {
                    required: 'Member ID is required'
                }
            });
            </text>
        }

        jQuery.validator.addMethod('uniqueEmail', function (value, element) {
            var error = false;
            $.ajax({
                url: "/umbraco/api/RegistrationApi/EmailIsInUse",
                data: { email: value },
                async: false,
                success: function (isInUse) {
                    error = isInUse != 'true';
                }
            });
            return error;
        });
        $('#registerModel_Email').rules('add', {
            uniqueEmail: true,
            messages: {
                uniqueEmail: 'A member with this e-mail address already exists'
            }
        });

        $('#register-form').bind('change keyup', function () {

            var isValid = validator.checkForm();
            validator.submitted = {}; // hack to reset validation behavior as a side effect of checkForm call
            if (isValid && !memberCheckError) {
                $("#submit-form").removeAttr('disabled');
            }
        });

        $('#registerModel_Password').bind('change keyup', function () {
            $('#password-valid').toggleClass('hri-hide', !$('#registerModel_Password').valid());
        });
    });

</script>
