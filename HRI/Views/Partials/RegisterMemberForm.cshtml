@using System.Web.Mvc.Html
@using ClientDependency.Core.Mvc
@using Umbraco.Web
@using HRI.Controllers
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@{
    @*
        You can specify a custom member type alias in the constructor, the default is 'Member'    
        for example, to use 'Custom Member' you'd use this syntax:
    
        var registerModel = Members.CreateRegistrationModel("Custom Member");
    *@
    
    var registerModel = Members.CreateRegistrationModel();

    registerModel.UsernameIsEmail = false;
    registerModel.RedirectUrl = "for-members/verify-account/";
    
    @*
        Configurable here:           
    
        registerModel.RedirectUrl       - Optional. What path to redirect to if registration is successful. 
                                          By default the member will be redirected to the current umbraco page 
                                          unless this is specified.
    
        registerModel.UsernameIsEmail   - the default is true
                                          if you want the username to be different from the email
                                          address, set this to true and add a new Username field in
                                          the form below
    
                                          @Html.LabelFor(m => registerModel.Username)
                                          @Html.TextBoxFor(m => registerModel.Username)
                                          @Html.ValidationMessageFor(m => registerModel.Username)
    *@
  
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    Html.RequiresJs("/umbraco_client/ui/jquery.js");
    Html.RequiresJs("/umbraco_client/Application/JQuery/jquery.validate.min.js");
    Html.RequiresJs("/umbraco_client/Application/JQuery/jquery.validate.unobtrusive.min.js");

    var success = TempData["FormSuccess"] != null;
}

<script type="text/javascript" src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

@if (success) 
{ 
    @* This message will show if RedirectOnSucces is set to false (default) *@
    <p>Registration succeeeded.</p>
}
else
{
    using (Html.BeginUmbracoForm<RegisterSurfaceController>("HandleRegisterMember"))
    {
        <fieldset>
        @Html.ValidationSummary("registerModel", true)

        <div class="row-fluid already-member">
            <div class="span3 offset9">
                Already registered? <a href="/for-members/login">Log in</a>
            </div>
        </div>
        <div class="row-fluid block select-type group">
            <div class="span5 desc"><h3>Select the option that best describes you.</h3></div>
            <div class="span5 selection">
                <label><input type="radio" name="user_type" id="user_type" value="register"> <span>I'm enrolled in a Health Republic Insurance plan.</span>
                    <span class="desc">This means you enrolled via NY State of Health, or: Via a paper application sent by mail or fax, or: You;ve recently received a bill from HRI via email or mail.</span>
                </label>

                <label><input type="radio" name="user_type" id="user_type" value="shop"> <span>I'd like to shop for a health insurance plan.</span>
                    <span class="desc">Please <a href="">shop for plans here</a>. If you need help or have questions, please call 888.990.5702 M-F, 8:30p, - 5pm.</span>
                </label>

                <label class="last"><input type="radio" name="user_type" id="user_type" value="provider"> <span>I'm a broker or healthcare provider.</span>
                    <span class="desc">Brokers, please visit our <a href="">broker page</a> for more info. Healcare providers, please visit our <a href="">provider page</a></span>
                </label>
            </div>
        </div>
            <div id="register-form">
                <div class="row-fluid block group">
                    <div class="span5 desc"><h3>Please enter your information.</h3></div>
                    <div class="span3 short">
                        @Html.Label("Social Security Number")
                        @Html.EditorFor(m => registerModel.MemberProperties[5].Value)
                        @Html.HiddenFor(m => registerModel.MemberProperties[5].Value)
                        @Html.ValidationMessageFor(m => registerModel.MemberProperties[5].Value)
                    </div>
                    <div class="span1 or">OR</div>
                    <div class="span3 short">
                        @Html.Label("Member ID")
                        @Html.EditorFor(m => registerModel.MemberProperties[6].Value)
                        @Html.HiddenFor(m => registerModel.MemberProperties[6].Value)
                        @Html.ValidationMessageFor(m => registerModel.MemberProperties[6].Value)
                    </div>
                </div>

                <div class="row-fluid">
                    <div class="span3 offset5 name">
                        @Html.Label("First Name")
                        @Html.EditorFor(m => registerModel.MemberProperties[0].Value)
                        @Html.HiddenFor(m => registerModel.MemberProperties[0].Alias)
                        @Html.ValidationMessageFor(m => registerModel.MemberProperties[0].Alias)
                    </div>
                    <div class="span3 name">
                        @Html.Label("Last Name")
                        @Html.EditorFor(m => registerModel.MemberProperties[1].Value)
                        @Html.HiddenFor(m => registerModel.MemberProperties[1].Value)
                        @Html.ValidationMessageFor(m => registerModel.MemberProperties[1].Value)
                    </div>
                </div>
                <div class="row-fluid">
                    <div class="span7 offset5">
                        @Html.Label("Email")
                        @Html.TextBoxFor(m => registerModel.Email)
                        @Html.ValidationMessageFor(m => registerModel.Email)
                    </div>
                </div>
                <div class="row-fluid">
                    <div class="span7 offset5">
                        @Html.Label("Confirm Email")
                        @Html.TextBoxFor(m => registerModel.Email)
                        @Html.ValidationMessageFor(m => registerModel.Email)
                    </div>
                </div>
                <div class="row-fluid">
                    <div class="span7 offset5">
                        @Html.Label("Zip Code")
                        @Html.EditorFor(m => registerModel.MemberProperties[3].Value)
                        @Html.HiddenFor(m => registerModel.MemberProperties[3].Value)
                        @Html.ValidationMessageFor(m => registerModel.MemberProperties[3].Value)
                    </div>
                </div>

                <div class="row-fluid block">
                    <div class="span5 desc"><h3>Choose a username.</h3></div>
                    <div class="span7">
                        @Html.Label("Username")
                        @Html.TextBoxFor(m => registerModel.Username, new { @id = "username" })
                        @Html.ValidationMessageFor(m => registerModel.Username)
                        <div id="result"></div>
                    </div>
                </div>

                <div class="row-fluid block">
                    <div class="span5 desc">
                        <h3>Choose a password.</h3>
                        <ul class="password-help">
                            <li>Password must be at least 8 characters long.</li>
                            <li>Contain 1 uppercase and 1 lowercase letter.</li>
                            <li>1 number or special character.</li>
                        </ul>
                    </div>
                    <div class="span7">
                        @Html.LabelFor(m => registerModel.Password)
                        @Html.PasswordFor(m => registerModel.Password)
                        @Html.ValidationMessageFor(m => registerModel.Password)
                    </div>
                </div>
                <div class="row-fluid block">
                    <div class="span5 desc"><h3>Optional.</h3></div>
                    <div class="span7">
                        @Html.Label("Phone Number")
                        @Html.EditorFor(m => registerModel.MemberProperties[4].Value)
                        @Html.HiddenFor(m => registerModel.MemberProperties[4].Value)
                        @Html.ValidationMessageFor(m => registerModel.MemberProperties[4].Value)
                    </div>
                </div>

                @Html.HiddenFor(m => registerModel.MemberTypeAlias)
                @Html.HiddenFor(m => registerModel.RedirectUrl)
                @Html.HiddenFor(m => registerModel.UsernameIsEmail)
                @Html.HiddenFor(m => registerModel.Name)

                <button class="btn cta cta-centered">Submit</button>
            </div>
        </fieldset>
    }
}

                <script>
                    $("#username").keyup(function () {
                        if ($('#username').val().length > 0) {
                            $.ajax({
                                url: "/umbraco/api/HriApi/IsUserNameAvailable",
                                data: { username: $('#username').val() },
                                success: function (data) {
                                    if (data == 'true' && $('#username').val().length > 5)
                                        $('#result').html("UserName is available");
                                    else
                                        $('#result').html("UserName not available");
                                },
                                error: function () { alert('error'); },
                                dataType: 'html'
                            });
                        }
                        else
                            $('#result').html('');
                    })
                </script>
