@using System.Web.Mvc.Html
@using ClientDependency.Core.Mvc
@using Umbraco.Web
@using HRI.Controllers
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@{
    @*
        You can specify a custom member type alias in the constructor, the default is 'Member'    
        for example, to use 'Custom Member' you'd use this syntax:
    
        var registerModel = Members.CreateRegistrationModel("Custom Member");
    *@
    
    var registerModel = Members.CreateRegistrationModel();

    registerModel.UsernameIsEmail = false;
    registerModel.RedirectUrl = "for-members/verify-account/";
    
    @*
        Configurable here:           
    
        registerModel.RedirectUrl       - Optional. What path to redirect to if registration is successful. 
                                          By default the member will be redirected to the current umbraco page 
                                          unless this is specified.
    
        registerModel.UsernameIsEmail   - the default is true
                                          if you want the username to be different from the email
                                          address, set this to true and add a new Username field in
                                          the form below
    
                                          @Html.LabelFor(m => registerModel.Username)
                                          @Html.TextBoxFor(m => registerModel.Username)
                                          @Html.ValidationMessageFor(m => registerModel.Username)
    *@
  
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    
    Html.RequiresJs("/umbraco_client/Application/JQuery/jquery.validate.min.js");
    Html.RequiresJs("/umbraco_client/Application/JQuery/jquery.validate.unobtrusive.min.js");

    var success = TempData["FormSuccess"] != null;
    var newUser = TempData["NewUser"] != null;
    var isNotValid = TempData["IsNotValid"] != null;
    var formClass = newUser || isNotValid ? String.Empty : "display: none;";
    var selectTypeClass = newUser || isNotValid ? "hri-hide" : String.Empty;
    var isEnrolled = TempData["IsEnrolled"] != null ? 1 : 0;
    var planId = TempData["PlanId"];
    
    //Member Fields
    var guidIndex = registerModel.MemberProperties.FindIndex(property => property.Alias == "guid");
    var firstNameIndex = registerModel.MemberProperties.FindIndex(property => property.Alias == "firstName");
    var lastNameIndex = registerModel.MemberProperties.FindIndex(property => property.Alias == "lastName");
    var memberIdIndex = registerModel.MemberProperties.FindIndex(property => property.Alias == "memberId");
    var ssnIndex = registerModel.MemberProperties.FindIndex(property => property.Alias == "ssn");
    var zipCodeIndex = registerModel.MemberProperties.FindIndex(property => property.Alias == "zipCode");
    var phoneNumberIndex = registerModel.MemberProperties.FindIndex(property => property.Alias == "phoneNumber");
    var yNumberIndex = registerModel.MemberProperties.FindIndex(property => property.Alias == "yNumber");
    var ebixIdIndex = registerModel.MemberProperties.FindIndex(property => property.Alias == "ebixId");
    var planIdIndex = registerModel.MemberProperties.FindIndex(property => property.Alias == "healthplanid");
    var enrollmentIndex = registerModel.MemberProperties.FindIndex(property => property.Alias == "enrollmentpageafterlogin");
}

@if (success) 
{ 
    @* This message will show if RedirectOnSucces is set to false (default) *@
    <p>Registration succeeeded.</p>
}
else
{
    using (Html.BeginUmbracoForm<RegisterSurfaceController>("HandleRegisterMember"))
    {
        <fieldset>
        @Html.ValidationSummary("registerModel", true)

        <div class="row-fluid already-member">
            <div class="span3 offset9">
                Already registered? <a href="/for-members/login">Log in</a>
            </div>
        </div>
            <div class="row-fluid block select-type group @selectTypeClass">
                <div class="span5 desc"><h3>Select the option that best describes you.</h3></div>
                <div class="span5 selection">
                    <label>
                        <input type="radio" name="user_type" id="user_type" value="register"> <span>I'm enrolled in a Health Republic Insurance plan.</span>
                        <span class="desc">This means you enrolled via NY State of Health, or: Via a paper application sent by mail or fax, or: You've recently received a bill from HRI via email or mail.</span>
                    </label>

                    <label>
                        <input type="radio" name="user_type" id="user_type" value="shop"> <span>I'd like to shop for a health insurance plan.</span>
                        <span class="desc">Please <a href="/shop-for-plans/compare-plans/">shop for plans here</a>. If you need help or have questions, please call 888.990.5702 M-F, 8:30p, - 5pm.</span>
                    </label>

                    <label class="last">
                        <input type="radio" name="user_type" id="user_type" value="provider"> <span>I'm a broker or healthcare provider.</span>
                        <span class="desc">Brokers, please visit our <a href="">broker page</a> for more info. Healcare providers, please visit our <a href="">provider page</a></span>
                    </label>
                </div>
            </div>
        <div id="register-form" style="@formClass">
            <div class="row-fluid block group">
                <div class="span5 desc info">
                    <h3>Please enter your information.</h3>
                    @Umbraco.Field("Information")
                </div> 
                <div class="span3 short @(newUser ? "" : "hide")">
                    @Html.Label("Social Security Number")
                    @Html.EditorFor(m => registerModel.MemberProperties[ssnIndex].Value)
                    @Html.HiddenFor(m => registerModel.MemberProperties[ssnIndex].Alias)
                    @Html.ValidationMessageFor(m => registerModel.MemberProperties[ssnIndex].Value)
                </div>

                <div class="span3 short @(newUser ? "hide" : "")">
                    @Html.Label("Member ID")
                    @Html.EditorFor(m => registerModel.MemberProperties[yNumberIndex].Value)
                    @Html.HiddenFor(m => registerModel.MemberProperties[yNumberIndex].Alias)
                    @Html.ValidationMessageFor(m => registerModel.MemberProperties[yNumberIndex].Value)
                </div>
            </div>

            <div class="row-fluid">
                <div class="span3 offset5 name">
                    @Html.Label("First Name")
                    @Html.EditorFor(m => registerModel.MemberProperties[firstNameIndex].Value)
                    @Html.HiddenFor(m => registerModel.MemberProperties[firstNameIndex].Alias)
                    @Html.ValidationMessageFor(m => registerModel.MemberProperties[firstNameIndex].Value)
                </div>
                <div class="span3 name">
                    @Html.Label("Last Name")
                    @Html.EditorFor(m => registerModel.MemberProperties[lastNameIndex].Value)
                    @Html.HiddenFor(m => registerModel.MemberProperties[lastNameIndex].Alias)
                    @Html.ValidationMessageFor(m => registerModel.MemberProperties[lastNameIndex].Value)
                </div>
            </div>
            <div class="row-fluid">
                <div class="span7 offset5">
                    @Html.Label("Email")
                    @Html.TextBoxFor(m => registerModel.Email)
                    @Html.ValidationMessageFor(m => registerModel.Email)
                </div>
            </div>
            <div class="row-fluid">
                <div class="span7 offset5">
                    @Html.Label("Confirm Email")
                    @Html.TextBoxFor(m => registerModel.Email)
                    @Html.ValidationMessageFor(m => registerModel.Email)
                </div>
            </div>
            <div class="row-fluid">
                <div class="span7 offset5">
                    @Html.Label("Zip Code")
                    @Html.EditorFor(m => registerModel.MemberProperties[zipCodeIndex].Value)
                    @Html.HiddenFor(m => registerModel.MemberProperties[zipCodeIndex].Alias)
                    @Html.ValidationMessageFor(m => registerModel.MemberProperties[zipCodeIndex].Value)
                </div>
            </div>
            <div class="row-fluid block">
                <div class="span5 desc"><h3>Choose a username.</h3></div>
                <div class="span7">
                    @Html.Label("Username")
                    @Html.TextBoxFor(m => registerModel.Username, new { @id = "username" })
                    @Html.ValidationMessageFor(m => registerModel.Username)
                    <div id="result"></div>
                </div>
            </div>

            <div class="row-fluid block">
                <div class="span5 desc">
                    <h3>Choose a password.</h3>
                    <ul class="password-help">
                        <li>Password must be at least 8 characters long.</li>
                        <li>Contain 1 uppercase and 1 lowercase letter.</li>
                        <li>1 number or special character.</li>
                    </ul>
                </div>
                <div class="span7">
                    @Html.LabelFor(m => registerModel.Password)
                    @Html.PasswordFor(m => registerModel.Password)
                    @Html.ValidationMessageFor(m => registerModel.Password)
                </div>
            </div>
            <div class="row-fluid block">
                <div class="span5 desc"><h3>Optional.</h3></div>
                <div class="span7">
                    @Html.Label("Phone Number")
                    @Html.EditorFor(m => registerModel.MemberProperties[phoneNumberIndex].Value)
                    @Html.HiddenFor(m => registerModel.MemberProperties[phoneNumberIndex].Alias)
                    @Html.ValidationMessageFor(m => registerModel.MemberProperties[phoneNumberIndex].Value)
                </div>
            </div>
            @* Form should contain all Member Properties even if it's not using them to prevent data lost during submit *@
            @Html.HiddenFor(m => registerModel.MemberProperties[guidIndex].Alias)
            @Html.HiddenFor(m => registerModel.MemberProperties[memberIdIndex].Alias)
            @Html.HiddenFor(m => registerModel.MemberProperties[ebixIdIndex].Alias)
            @Html.HiddenFor(m => registerModel.MemberProperties[planIdIndex].Alias)
            @Html.HiddenFor(m => registerModel.MemberProperties[planIdIndex].Value, new { Value = planId })

            @Html.HiddenFor(m => registerModel.MemberProperties[enrollmentIndex].Alias)
            @Html.HiddenFor(m => registerModel.MemberProperties[enrollmentIndex].Value, new { Value = isEnrolled})
            @Html.HiddenFor(m => registerModel.MemberTypeAlias)
            @Html.HiddenFor(m => registerModel.RedirectUrl)
            @Html.HiddenFor(m => registerModel.UsernameIsEmail)
            @Html.HiddenFor(m => registerModel.Name)

            <button class="btn cta cta-centered">Submit</button>
        </div>
    </fieldset>
    }
}

<script>
$("#username").keyup(function () {
    if ($('#username').val().length > 0) {
        $.ajax({
            url: "/umbraco/api/HriApi/IsUserNameAvailable",
            data: { username: $('#username').val() },
            success: function (data) {
                if (data == 'true' && $('#username').val().length > 5)
                    $('#result').html("<span class='success'>Username is available</span>");
                else
                    $('#result').html("<span class='error'>Username not available</span>");
            },
            error: function () { $('#result').html("<span class='error'>Username not available</span>"); },
            dataType: 'html'
        });
    }
    else
        $('#result').html('');
})
</script>
