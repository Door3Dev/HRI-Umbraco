@inherits UmbracoViewPage<ComparePlansViewModel>
@using ClientDependency.Core.Mvc
@using HRI.Models
@using HRI.Controllers

@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    
    Html.RequiresJs("/umbraco_client/Application/JQuery/jquery.validate.min.js");
    Html.RequiresJs("/umbraco_client/Application/JQuery/jquery.validate.unobtrusive.min.js");

    var backToEnrollment = Request["enrollment"] != null;
}

@Html.Raw(Html.RenderJsHere())

@using (Html.BeginUmbracoForm<ComparePlansSurfaceController>("ShowPlans", new {enrollment =  "true"})) {
<div class="row-fluid block">
    <div class="span5 desc"><h3>Please enter your zip code.</h3></div>
    <div class="span7">
        <label>Zip Code</label>
        @Html.TextBoxFor(m => m.ZipCode, new { id = "shop-zipcode"})
        @Html.ValidationMessageFor(m => m.ZipCode)
        <div class="county" id="shop-county"></div>
    </div>
</div>
<div class="row-fluid block">
    <div class="span5 desc">
        <h3>Who would you like to cover under this policy?</h3>
        <div class="expand-group">
            <h3 class="expand-link"><span class="expand-toggle">[ + ]</span> <span class="link">Who's eligible?</span></h3>
            <div class="expand-content" style="display: none;">
                <p>
                    Spouse / Partner:<br>
                    You may cover your spouse or domestic partner on your plan. You may be required to provide proof of your marriage or domestic partnership upon enrollment.<br><br>
                    Children:<br>You can cover your biological or adopted children, foster children, and children legally under your guardianship on your plan. You may be required to provide proof of birth, adoption, foster placements, or legal guardianship upon enrollment.<br><br>
                    Children are eligible as dependents on your plan up to age 26. Children between the ages of 26 and 29 may also be eligible if they are unmarried, live or work in New York state, and are not eligible for employer-sponsored coverage.
                </p>
            </div>
        </div>
    </div>
    <div class="span7">
        <label class="checkbox inline">
            @Html.CheckBoxFor(m => m.CoverSelf, new { id = "shop-coverself-check" }) Self
        </label>
        <label class="checkbox inline pad">
            @Html.CheckBoxFor(m => m.CoverSpouse, new { id = "shop-coverpartner-check" }) Spouse/Partner
        </label>
        <label class="checkbox inline pad">
            @Html.CheckBoxFor(m => m.CoverChildren, new { id = "shop-coverchildren-check" }) Children
        </label>
        <div class="span7 cover" id="shop-coverself">
            <label>How old are you?</label>
            @Html.TextBoxFor(m => m.CustomerAge, new { id = "customer-age" })
            <div>@Html.ValidationMessageFor(m => m.CustomerAge)</div>
            <div id="customer-age-warning" class='warning hri-hide'><b>Note:</b> You have indicated your age as 65 or above. Individuals 65 or older may enroll in an individual marketplace insurance plan if they are not eligible for Medicare.</div>
        </div>
        <div class="span7 cover" id="shop-coverpartner">
            <label>How old is your spouse or partner?</label>
            @Html.TextBoxFor(m => m.SpouseAge, new { id = "spouse-age" })
            <div>@Html.ValidationMessageFor(m => m.SpouseAge)</div>
            <div id="spouse-age-warning" class='warning hri-hide'><b>Note:</b> You have indicated your spouse/partner's age as 65 or above. Individuals 65 or older may enroll in an individual marketplace insurance plan if they are not eligible for Medicare.</div>
        </div>
        <div id="shop-coverchild" class="span7 cover">
            @* i = -1 is to generate template, others for generating existing items *@
            @for (var i = -1; i < (Model.ChildrenAges == null ? 0 : Model.ChildrenAges.Count); ++i)
            {
                <div class="child @(i < 0 ? "template" : string.Empty)">
                    <label>How old is child #<span class="age">@(i < 0 ? string.Empty : (i + 1).ToString())</span>?</label>
                    @if (i < 0)
                    {
                        <input type="text">
                    }
                    else
                    {
                        <input type="text" name="ChildrenAges" value=@(!Model.ChildrenAges[i].HasValue ? string.Empty : Model.ChildrenAges[i].ToString())>
                    }

                    <div class="row-fluid">
                        <div class="span5"><a href="#" class="shop-link add-child"><i class="fa fa-plus-circle"> </i>Add child</a></div>
                        <div class="span5"><a href="#" class="shop-link remove-child"><i class="fa fa-minus-circle"> </i>Remove child</a></div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<div class="row-fluid block">
    <div class="span12">
        <small>
            @Umbraco.Field("financialAssistanceMessage")
        </small>
    </div>
</div>
<div class="find">
    @Html.ValidationSummary("viewModel", true)
    <input type="submit" class="btn cta cta-centered cancel-max-width" value="Compare Plans and Prices">
</div>

<script>
    $('input[name="ChildrenAges"]').inputmask('Regex', { regex: '^[0-9]{1,3}$' });
    var ValidateAge = function (warningElementId) {
        return function() {
            var value = Number($(this).val());
            if (isNaN(value) || value < 65) {
                $(warningElementId).addClass("hri-hide");
            } else {
                $(warningElementId).removeClass("hri-hide");
            }
        };
    };

    $("#customer-age").change(ValidateAge("#customer-age-warning"));
    $("#spouse-age").change(ValidateAge("#spouse-age-warning"));
</script>
}