@inherits UmbracoTemplatePage

@using System.Web.Mvc.Html
@using ClientDependency.Core.Mvc
@using Umbraco.Web
@using HRI.Controllers
@using HRI.Models
@using HRI.ViewModels

@{
    var resetPasswordViewModel = new ResetPasswordViewModel();
    bool validUser = false;
    string user = TempData["userName"] != null ? TempData["userName"].ToString() : null;
    string guid = TempData["guid"] != null ? TempData["guid"].ToString() : null;
    if (user != null && TempData["guid"] != null)
    {
        var member = Members.GetByUsername(user);
        if(member != null)
        {
            if (member.GetPropertyValue("guid").ToString() == guid)
            {
                validUser = true;
                resetPasswordViewModel.UserName = user;
                resetPasswordViewModel.Guid = guid;
            }
        }
    }    

    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}

@Html.Raw(Html.RenderJsHere())

@if (Convert.ToBoolean(TempData["ResetPasswordIsSuccessful"]))
{
    <h3>Success!</h3>
    <p>@Umbraco.Field("SuccessMessage")</p>
    <br /><br />
    <div style="text-align:center">
        <span><a href="/for-members/login">Click Here</a> to login.</span>
    </div>
    return;
}

@if (!validUser)
{
    <script>window.location = "/";</script>
    return;
}

@using (Html.BeginUmbracoForm<MembersSurfaceController>("ResetPassword"))
{
    <fieldset>
        @Html.ValidationSummary("resetPasswordViewModel", true)
        @Html.AntiForgeryToken()

        @Html.Label("New Password")
        <em class="purple"><small>To ensure account security, password must be at least 8 characters long, contain at least 1 uppercase letter, 1 lowercase letter, and 1 number.</small></em><br>
        @Html.PasswordFor(m => resetPasswordViewModel.NewPassword)
        @Html.ValidationMessageFor(m => resetPasswordViewModel.NewPassword)
        <br />

        @Html.Label("Confirm New Password")
        @Html.PasswordFor(m => resetPasswordViewModel.ConfirmNewPassword)
        @Html.ValidationMessageFor(m => resetPasswordViewModel.ConfirmNewPassword)

        @Html.Hidden("username", user)
        @Html.Hidden("guid", guid)

        @Html.HiddenFor(m => resetPasswordViewModel.UserName, new { id = "Username" })
        @Html.HiddenFor(m => resetPasswordViewModel.Guid, new { id = "Guid" })                                
        <br />

        <button type="submit" class="btn hri-btn disable-after-click">Change Password</button>
    </fieldset>
}
