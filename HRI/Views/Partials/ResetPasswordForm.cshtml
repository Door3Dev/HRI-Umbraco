@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@using System.Web.Mvc.Html
@using ClientDependency.Core.Mvc
@using Umbraco.Web
@using Umbraco.Web.Models
@using Umbraco.Web.Controllers
@using HRI.Controllers
@using HRI.Models

@{
    var resetPasswordViewModel = new ResetPasswordViewModel();
    bool validUser = false;
    string user = TempData["userName"] != null ? TempData["userName"].ToString() : null;
    string guid = TempData["guid"] != null ? TempData["guid"].ToString() : null;
    if (user != null && TempData["guid"] != null)
    {
        var member = Members.GetByUsername(user);
        if(member != null)
        {
            if (member.GetPropertyValue("guid").ToString() == guid)
            {
                validUser = true;
                resetPasswordViewModel.UserName = user;
                resetPasswordViewModel.Guid = guid;
            }
        }
    }    

    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    
    Html.RequiresJs("/umbraco_client/Application/JQuery/jquery.validate.min.js");
    Html.RequiresJs("/umbraco_client/Application/JQuery/jquery.validate.unobtrusive.min.js");
}


@if (Convert.ToBoolean(TempData["ResetPasswordIsSuccessful"]))
{
    <h3>Success!</h3>
    <p>Your password has been updated. You may use it the next time you sign in.</p>
}
else
{
    if(validUser)
    { 
        using (Html.BeginUmbracoForm<MembersSurfaceController>("ResetPassword"))
        {
            <fieldset>            

                @Html.ValidationSummary(true)
                @Html.AntiForgeryToken()


                @Html.Label("New Password")
                <em class="purple"><small>To ensure account security, password must be at least 8 characters long, contain at least 1 uppercase letter, 1 lowercase letter and 1 number - can contain special characters.</small></em><br>
                @Html.PasswordFor(m => resetPasswordViewModel.NewPassword)
                @Html.ValidationMessageFor(m => resetPasswordViewModel.NewPassword)
                <br />

                @Html.Label("Confirm New Password")
                @Html.PasswordFor(m => resetPasswordViewModel.ConfirmNewPassword)
                @Html.ValidationMessageFor(m => resetPasswordViewModel.ConfirmNewPassword)

                @Html.Hidden("username", @user)
                @Html.Hidden("guid", @guid)

                @Html.HiddenFor(m => resetPasswordViewModel.UserName, new {id = "Username"})
                @Html.HiddenFor(m => resetPasswordViewModel.Guid, new {id = "Guid"})                                
                <br />

                <button type="submit" class="btn hri-btn disable-after-click">Change Password</button>
            </fieldset>
        }
    }
    else
    {
        <script>window.location = "/";</script>
    }
}

